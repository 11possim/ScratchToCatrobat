#!/usr/bin/env python
#  ScratchToCatrobat: A tool for converting Scratch projects into Catrobat programs.
#  Copyright (C) 2013-2015 The Catrobat Team
#  (<http://developer.catrobat.org/credits>)
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as
#  published by the Free Software Foundation, either version 3 of the
#  License, or (at your option) any later version.
#
#  An additional term exception under section 7 of the GNU Affero
#  General Public License, version 3, is available at
#  http://developer.catrobat.org/license_additional_term
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import print_function
import os
import platform
import subprocess
import sys
sys.path.append(os.path.join(os.path.realpath(os.path.dirname(__file__)), "src"))
from scratchtocatrobat.tools import helpers

data_dirs = helpers.config.get("PATHS", ["data", "logging", "output", "web_output", "tmp"])
helpers.make_dir_if_not_exists(data_dirs)
[jython_home_dir, jython_exec_path, jython_path] = helpers.config.get("PATHS", ["jython_home", "jython_exec", "jython"])

env = os.environ
env['JYTHONPATH'] = jython_path

if not os.path.isdir(jython_home_dir):
    error("Invalid jython home path given. No valid directory. Please update 'jython_home' in the config file.")
if not os.path.isfile(jython_exec_path):
    error("Jython script path '%s' must exist." % jython_exec_path.replace(".bat", "[.bat]"))

modules_under_test = []
if len(sys.argv) < 2 or sys.argv[1] == "all":
    normalized_src_path = os.path.normpath(helpers.SRC_PATH)
    for subdir, dirs, files in os.walk(helpers.SRC_PATH):
        for file in files:
            if file.startswith("test_") and file.endswith(".py"):
                relative_subdir_path = os.path.normpath(subdir).replace(normalized_src_path, "")
                if relative_subdir_path.startswith(os.sep):
                    relative_subdir_path = relative_subdir_path[1:]
                if relative_subdir_path.endswith(os.sep):
                    relative_subdir_path = relative_subdir_path[:-1]
                test_module_name = relative_subdir_path.replace(os.sep, ".") + "." + file[:-3]
                modules_under_test.append(test_module_name)
elif (isinstance(sys.argv[1], str) or isinstance(sys.argv[1], unicode)) and sys.argv[1].startswith("test_"):
    modules_under_test.append("scratchtocatrobat." + sys.argv[1])
else:
    error("Invalid input given!")

for module in modules_under_test:
    exec_args = [jython_exec_path, "-m", module]

    if len(sys.argv) >= 3:
        exec_args += [sys.argv[2]]
    exit_code = subprocess.call(exec_args, env=env)
    if exit_code != 0:
        sys.exit(exit_code)

sys.exit(helpers.ExitCode.SUCCESS)
